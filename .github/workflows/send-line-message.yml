name: LINE Water Check Notification

on:
  schedule:
    - cron: '0 0 * * *'    # JST 9:00
    - cron: '0 7 * * *'    # JST 17:00
  workflow_dispatch:
    inputs:
      test_hour:
        description: 'テスト用の擬似時刻 (例: 17)'
        required: false

jobs:
  notify-if-no-water:
    runs-on: ubuntu-latest
    steps:
      - name: Check Firestore and notify LINE
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_GROUP_ID: ${{ secrets.LINE_GROUP_ID }}
          TEST_HOUR: ${{ github.event.inputs.test_hour }}
        run: |
          echo "▶ 開始：Firestoreと天気APIを確認"

          TODAY=$(date -u +"%Y-%m-%d" -d "+9 hours")
          JST_HOUR=${TEST_HOUR:-$(date -u +"%H" -d "+9 hours")}
          echo "📅 今日: $TODAY JST時刻: $JST_HOUR"

          echo "$FIREBASE_SERVICE_ACCOUNT" > service-account.json
          FIREBASE_CLIENT_EMAIL=$(jq -r '.client_email' service-account.json)
          FIREBASE_PRIVATE_KEY=$(jq -r '.private_key' service-account.json)

          HEADER='{"alg":"RS256","typ":"JWT"}'
          NOW=$(date +%s)
          EXP=$(($NOW + 3600))

          CLAIM='{
            "iss": "'"$FIREBASE_CLIENT_EMAIL"'",
            "sub": "'"$FIREBASE_CLIENT_EMAIL"'",
            "aud": "https://oauth2.googleapis.com/token",
            "iat": '"$NOW"',
            "exp": '"$EXP"',
            "scope": "https://www.googleapis.com/auth/datastore"
          }'

          b64enc() { openssl base64 -e -A | tr '+/' '-_' | tr -d '='; }

          JWT_HEADER=$(echo -n "$HEADER" | b64enc)
          JWT_CLAIM=$(echo -n "$CLAIM" | b64enc)
          JWT_UNSIGNED="$JWT_HEADER.$JWT_CLAIM"

          echo "$FIREBASE_PRIVATE_KEY" | sed 's/\\n/\n/g' > private_key.pem
          JWT_SIGNATURE=$(echo -n "$JWT_UNSIGNED" | openssl dgst -sha256 -sign private_key.pem | b64enc)
          JWT="$JWT_UNSIGNED.$JWT_SIGNATURE"

          ACCESS_TOKEN=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=$JWT" \
            | jq -r '.access_token')

          FIRESTORE_URL="https://firestore.googleapis.com/v1/projects/$FIREBASE_PROJECT_ID/databases/(default)/documents/water-records/$TODAY"
          HTTP_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X GET "$FIRESTORE_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN")

          RESPONSE=$(echo "$HTTP_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          echo "🧾 HTTP ステータス: $HTTP_STATUS"
          echo "$RESPONSE" | jq .

          if [ "$HTTP_STATUS" = "404" ]; then
            HAS_TIME1=""
            HAS_TIME2=""
          else
            HAS_TIME1=$(echo "$RESPONSE" | jq -r '.fields.time1.stringValue // empty')
            HAS_TIME2=$(echo "$RESPONSE" | jq -r '.fields.time2.stringValue // empty')
          fi

          if [[ "$JST_HOUR" -ge 9 && "$JST_HOUR" -le 15 ]]; then
            if [ -n "$HAS_TIME1" ]; then
              echo "✅ 朝の水やり（time1）記録あり: $HAS_TIME1"
            else
              echo "❌ 朝の水やり記録なし。LINE通知を送信します"
              curl -X POST https://api.line.me/v2/bot/message/push \
                -H "Authorization: Bearer $LINE_CHANNEL_ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d '{
                  "to": "'"$LINE_GROUP_ID"'",
                  "messages": [
                    {
                      "type": "text",
                      "text": "⚠️ 本日（'"$TODAY"'）の朝の水やりが未記録です！"
                    }
                  ]
                }'
            fi
          elif [ "$JST_HOUR" -eq 16 ]; then
            if [ -n "$HAS_TIME2" ]; then
              echo "✅ 夕方の水やり（time2）記録あり: $HAS_TIME2"
            else
              echo "❌ 夕方の水やり記録なし。天気と気温を確認します"

              LAT="34.5973"
              LON="135.6063"
              WEATHER_RESPONSE=$(curl -s "https://api.open-meteo.com/v1/forecast?latitude=$LAT&longitude=$LON&hourly=temperature_2m,weathercode&timezone=Asia%2FTokyo&forecast_days=1")

              TEMP_AT_14=$(echo "$WEATHER_RESPONSE" | jq '.hourly.temperature_2m[14]')
              WEATHER_CODE_AT_14=$(echo "$WEATHER_RESPONSE" | jq '.hourly.weathercode[14]')

              echo "🌡️ 14時の気温: ${TEMP_AT_14}℃"
              echo "🌤️ 14時の天気コード: ${WEATHER_CODE_AT_14}"

              if [ "$TEMP_AT_14" != "null" ] && [ "$WEATHER_CODE_AT_14" != "null" ]; then
                if [ "$(echo "$TEMP_AT_14 >= 30" | bc)" -eq 1 ] && [[ "$WEATHER_CODE_AT_14" =~ ^(0|1|2)$ ]]; then
                  echo "☀️ 暑くて晴れ → 水やりが必要。LINE通知を送信します"
                  curl -X POST https://api.line.me/v2/bot/message/push \
                    -H "Authorization: Bearer $LINE_CHANNEL_ACCESS_TOKEN" \
                    -H "Content-Type: application/json" \
                    -d '{
                      "to": "'"$LINE_GROUP_ID"'",
                      "messages": [
                        {
                          "type": "text",
                          "text": "⚠️ 本日（'"$TODAY"'）の夕方の水やりが未記録です！気温が'"$TEMP_AT_14"'℃・晴れのため、水やりが必要かもしれません。"
                        }
                      ]
                    }'
                else
                  echo "☁️ 暑くない or 晴れじゃない → 水やり不要。LINE通知を送信します"
                  curl -X POST https://api.line.me/v2/bot/message/push \
                    -H "Authorization: Bearer $LINE_CHANNEL_ACCESS_TOKEN" \
                    -H "Content-Type: application/json" \
                    -d '{
                      "to": "'"$LINE_GROUP_ID"'",
                      "messages": [
                        {
                          "type": "text",
                          "text": "本日（'"$TODAY"'）の14時は晴れ（'"$TEMP_AT_14"'℃）のため、水やりの必要はありませんでした☀️"
                        }
                      ]
                    }'
                fi
              else
                echo "⚠️ 天気データが取得できなかったため、通知をスキップします"
              fi
            fi
          else
            echo "⏰ この時間（$JST_HOUR時）は何もしません"
          fi

          echo "✅ 処理完了"
